// small modification on Google Quantum Computing Playground base code for Shor's Integer Factorization algorithm

proc Factorize N
  // the minimum semiprime number considered is 3 * 5 = 15
  if N < 15 
    Print "The semiprime is too small. Try another number."
    Breakpoint
  endif

  // the method getWidth return the number
  // of bits needed to store N
  N_bits = QMath.getWidth(N)
  total_bits = 2 * N_bits + 3

  // create the initial random guess for a factor
  g = 0
  for g; (QMath.gcd(N, g) > 1) || (g < 2); g
    g = Math.floor(Math.random() * 10000) % N
  endfor

  Print "Initial guess: " + g

  // create a superposition of states in each
  // digit using the Hadamard transform
  for i = 0; i < total_bits; i++
    Hadamard i
  endfor
	
  // calculates g^N (mod total_bits)
  ExpModN g, N, total_bits

  // measuring bits cause the superposition to colapse into
  // only the inputs correspondednt to the measured output
  for i = 0; i < N_bits; i++
    MeasureBit total_bits + i
  endfor

  // the reversed of the QFT will turn the p-spaced periodic
  // superposition in the input into the 1/p frequency in the output
  InvQFT 0, total_bits

  // inverse the digits, since the output
  // in last step was in reversed order
  for i = 0; i < total_bits / 2; i++
    Swap i, total_bits - i - 1
  endfor

  // as explained along the theory, the initial guess might be a bad
  // value, with 3/8 chance of being a good choice. Then, it is very
  // likely that the correct resul is achieved within the first 10 trials
  for trials = 100; trials >= 0; trials--
    Measure
    c = measured_value

    // if c == 0
    //  Print "Measured zero, try again."
    //  continue
    // endif

    p = 1 << N_bits
		Print c
    Print p
    Print "Measured " + c + " (" + c / p + ")"

    tmp = QMath.fracApprox(c, p, N_bits)

    c = tmp[0];
    p = tmp[1];

    Print "fractional approximation is " + c + "/" + p

    // after the QFT, the measurement is in the frequency domain, and
    // we wish that the denominator corresponds to de period
    if (p % 2 == 1) && (2 * p < (1 << N_bits))
      Print "Odd denominator, trying to expand by 2."
      p *= 2
    endif

    // of the denominator is odd and can't be multiplied by 2 in N_bits,
    // then we had a bad guess g and should repeat the algorithm
    if p % 2 == 1
      Print "Odd period, try again."
      continue
    endif

    Print "Possible period is " + p

    // if the period is even, we can calculate g^(p/2) +- 1
    // to get good guesses for factors of N
    a = QMath.ipow(g, p / 2) + 1 % N
    b = QMath.ipow(g, p / 2) - 1 % N

    // a and b might not be factors of N, but share factor with N
    a = QMath.gcd(N, a)
    b = QMath.gcd(N, b)

    if a > b
      factor = a
    else
      factor = b
    endif

    if (factor < N) && (factor > 1)
      Display "<h2>Success: " + factor + " " + N / factor
      Breakpoint
    else
      Print "Unable to determine factors, try again."
      continue
    endif
  endfor
endproc

VectorSize 16 // this should not exceed 22, the number of qubits in the simulator
Factorize 39
